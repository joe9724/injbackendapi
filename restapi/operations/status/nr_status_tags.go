// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrStatusTagsHandlerFunc turns a function with the right signature into a status tags handler
type NrStatusTagsHandlerFunc func(NrStatusTagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrStatusTagsHandlerFunc) Handle(params NrStatusTagsParams) middleware.Responder {
	return fn(params)
}

// NrStatusTagsHandler interface for that can handle valid status tags params
type NrStatusTagsHandler interface {
	Handle(NrStatusTagsParams) middleware.Responder
}

// NewNrStatusTags creates a new http.Handler for the status tags operation
func NewNrStatusTags(ctx *middleware.Context, handler NrStatusTagsHandler) *NrStatusTags {
	return &NrStatusTags{Context: ctx, Handler: handler}
}

/*NrStatusTags swagger:route GET /status/tags Status statusTags

获取热门搜索关键词

*/
type NrStatusTags struct {
	Context *middleware.Context
	Handler NrStatusTagsHandler
}

func (o *NrStatusTags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrStatusTagsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
