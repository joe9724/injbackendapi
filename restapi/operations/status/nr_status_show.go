// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrStatusShowHandlerFunc turns a function with the right signature into a status show handler
type NrStatusShowHandlerFunc func(NrStatusShowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrStatusShowHandlerFunc) Handle(params NrStatusShowParams) middleware.Responder {
	return fn(params)
}

// NrStatusShowHandler interface for that can handle valid status show params
type NrStatusShowHandler interface {
	Handle(NrStatusShowParams) middleware.Responder
}

// NewNrStatusShow creates a new http.Handler for the status show operation
func NewNrStatusShow(ctx *middleware.Context, handler NrStatusShowHandler) *NrStatusShow {
	return &NrStatusShow{Context: ctx, Handler: handler}
}

/*NrStatusShow swagger:route GET /status/show Status statusShow

获取帖子详情

*/
type NrStatusShow struct {
	Context *middleware.Context
	Handler NrStatusShowHandler
}

func (o *NrStatusShow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrStatusShowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
