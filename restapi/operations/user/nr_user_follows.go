// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrUserFollowsHandlerFunc turns a function with the right signature into a user follows handler
type NrUserFollowsHandlerFunc func(NrUserFollowsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserFollowsHandlerFunc) Handle(params NrUserFollowsParams) middleware.Responder {
	return fn(params)
}

// NrUserFollowsHandler interface for that can handle valid user follows params
type NrUserFollowsHandler interface {
	Handle(NrUserFollowsParams) middleware.Responder
}

// NewNrUserFollows creates a new http.Handler for the user follows operation
func NewNrUserFollows(ctx *middleware.Context, handler NrUserFollowsHandler) *NrUserFollows {
	return &NrUserFollows{Context: ctx, Handler: handler}
}

/*NrUserFollows swagger:route GET /user/follows User userFollows

查看用户关注的人

*/
type NrUserFollows struct {
	Context *middleware.Context
	Handler NrUserFollowsHandler
}

func (o *NrUserFollows) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserFollowsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
