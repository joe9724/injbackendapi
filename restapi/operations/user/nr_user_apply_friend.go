// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrUserApplyFriendHandlerFunc turns a function with the right signature into a user apply friend handler
type NrUserApplyFriendHandlerFunc func(NrUserApplyFriendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserApplyFriendHandlerFunc) Handle(params NrUserApplyFriendParams) middleware.Responder {
	return fn(params)
}

// NrUserApplyFriendHandler interface for that can handle valid user apply friend params
type NrUserApplyFriendHandler interface {
	Handle(NrUserApplyFriendParams) middleware.Responder
}

// NewNrUserApplyFriend creates a new http.Handler for the user apply friend operation
func NewNrUserApplyFriend(ctx *middleware.Context, handler NrUserApplyFriendHandler) *NrUserApplyFriend {
	return &NrUserApplyFriend{Context: ctx, Handler: handler}
}

/*NrUserApplyFriend swagger:route POST /user/applyToFriend User userApplyFriend

申请好友

*/
type NrUserApplyFriend struct {
	Context *middleware.Context
	Handler NrUserApplyFriendHandler
}

func (o *NrUserApplyFriend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserApplyFriendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
