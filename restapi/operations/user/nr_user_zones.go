// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrUserZonesHandlerFunc turns a function with the right signature into a user zones handler
type NrUserZonesHandlerFunc func(NrUserZonesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserZonesHandlerFunc) Handle(params NrUserZonesParams) middleware.Responder {
	return fn(params)
}

// NrUserZonesHandler interface for that can handle valid user zones params
type NrUserZonesHandler interface {
	Handle(NrUserZonesParams) middleware.Responder
}

// NewNrUserZones creates a new http.Handler for the user zones operation
func NewNrUserZones(ctx *middleware.Context, handler NrUserZonesHandler) *NrUserZones {
	return &NrUserZones{Context: ctx, Handler: handler}
}

/*NrUserZones swagger:route GET /user/zones User userZones

获取用户加入的圈子

获取用户加入的圈子(没有返回空数组)

*/
type NrUserZones struct {
	Context *middleware.Context
	Handler NrUserZonesHandler
}

func (o *NrUserZones) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserZonesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
