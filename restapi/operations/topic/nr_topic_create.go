// Code generated by go-swagger; DO NOT EDIT.

package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrTopicCreateHandlerFunc turns a function with the right signature into a topic create handler
type NrTopicCreateHandlerFunc func(NrTopicCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrTopicCreateHandlerFunc) Handle(params NrTopicCreateParams) middleware.Responder {
	return fn(params)
}

// NrTopicCreateHandler interface for that can handle valid topic create params
type NrTopicCreateHandler interface {
	Handle(NrTopicCreateParams) middleware.Responder
}

// NewNrTopicCreate creates a new http.Handler for the topic create operation
func NewNrTopicCreate(ctx *middleware.Context, handler NrTopicCreateHandler) *NrTopicCreate {
	return &NrTopicCreate{Context: ctx, Handler: handler}
}

/*NrTopicCreate swagger:route POST /topic/create Topic topicCreate

创建话题

在调用match接口时，系统需要先判断是否存在该话题名称，不存在则先创建一条话题

*/
type NrTopicCreate struct {
	Context *middleware.Context
	Handler NrTopicCreateHandler
}

func (o *NrTopicCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrTopicCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
