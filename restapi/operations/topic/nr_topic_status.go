// Code generated by go-swagger; DO NOT EDIT.

package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrTopicStatusHandlerFunc turns a function with the right signature into a topic status handler
type NrTopicStatusHandlerFunc func(NrTopicStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrTopicStatusHandlerFunc) Handle(params NrTopicStatusParams) middleware.Responder {
	return fn(params)
}

// NrTopicStatusHandler interface for that can handle valid topic status params
type NrTopicStatusHandler interface {
	Handle(NrTopicStatusParams) middleware.Responder
}

// NewNrTopicStatus creates a new http.Handler for the topic status operation
func NewNrTopicStatus(ctx *middleware.Context, handler NrTopicStatusHandler) *NrTopicStatus {
	return &NrTopicStatus{Context: ctx, Handler: handler}
}

/*NrTopicStatus swagger:route GET /topic/status Topic topicStatus

获取话题下的动态列表

获取话题下的动态列表(0:最新  1:精华)

*/
type NrTopicStatus struct {
	Context *middleware.Context
	Handler NrTopicStatusHandler
}

func (o *NrTopicStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrTopicStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
