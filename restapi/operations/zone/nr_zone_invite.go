// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrZoneInviteHandlerFunc turns a function with the right signature into a zone invite handler
type NrZoneInviteHandlerFunc func(NrZoneInviteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrZoneInviteHandlerFunc) Handle(params NrZoneInviteParams) middleware.Responder {
	return fn(params)
}

// NrZoneInviteHandler interface for that can handle valid zone invite params
type NrZoneInviteHandler interface {
	Handle(NrZoneInviteParams) middleware.Responder
}

// NewNrZoneInvite creates a new http.Handler for the zone invite operation
func NewNrZoneInvite(ctx *middleware.Context, handler NrZoneInviteHandler) *NrZoneInvite {
	return &NrZoneInvite{Context: ctx, Handler: handler}
}

/*NrZoneInvite swagger:route POST /zone/invite Zone zoneInvite

邀请好友加入圈子

邀请好友加入圈子(圈主/管理员)

*/
type NrZoneInvite struct {
	Context *middleware.Context
	Handler NrZoneInviteHandler
}

func (o *NrZoneInvite) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrZoneInviteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
