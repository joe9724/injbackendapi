// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrZoneCreateHandlerFunc turns a function with the right signature into a zone create handler
type NrZoneCreateHandlerFunc func(NrZoneCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrZoneCreateHandlerFunc) Handle(params NrZoneCreateParams) middleware.Responder {
	return fn(params)
}

// NrZoneCreateHandler interface for that can handle valid zone create params
type NrZoneCreateHandler interface {
	Handle(NrZoneCreateParams) middleware.Responder
}

// NewNrZoneCreate creates a new http.Handler for the zone create operation
func NewNrZoneCreate(ctx *middleware.Context, handler NrZoneCreateHandler) *NrZoneCreate {
	return &NrZoneCreate{Context: ctx, Handler: handler}
}

/*NrZoneCreate swagger:route POST /zone/create Zone zoneCreate

创建圈子

*/
type NrZoneCreate struct {
	Context *middleware.Context
	Handler NrZoneCreateHandler
}

func (o *NrZoneCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrZoneCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
