// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"injbackendapi/restapi/operations/comment"
	"injbackendapi/restapi/operations/file_upload"
	"injbackendapi/restapi/operations/status"
	"injbackendapi/restapi/operations/topic"
	"injbackendapi/restapi/operations/user"
	"injbackendapi/restapi/operations/zone"
)

// NewRelationZoneAPI creates a new RelationZone instance
func NewRelationZoneAPI(spec *loads.Document) *RelationZoneAPI {
	return &RelationZoneAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		CommentNrCommentsCreateHandler: comment.NrCommentsCreateHandlerFunc(func(params comment.NrCommentsCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentNrCommentsCreate has not yet been implemented")
		}),
		CommentNrCommentsDeleteHandler: comment.NrCommentsDeleteHandlerFunc(func(params comment.NrCommentsDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentNrCommentsDelete has not yet been implemented")
		}),
		CommentNrCommentsListHandler: comment.NrCommentsListHandlerFunc(func(params comment.NrCommentsListParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentNrCommentsList has not yet been implemented")
		}),
		CommentNrCommentsReplyHandler: comment.NrCommentsReplyHandlerFunc(func(params comment.NrCommentsReplyParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentNrCommentsReply has not yet been implemented")
		}),
		FileUploadNrFileUploadHandler: file_upload.NrFileUploadHandlerFunc(func(params file_upload.NrFileUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation FileUploadNrFileUpload has not yet been implemented")
		}),
		StatusNrStatusCreateHandler: status.NrStatusCreateHandlerFunc(func(params status.NrStatusCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusCreate has not yet been implemented")
		}),
		StatusNrStatusLikeHandler: status.NrStatusLikeHandlerFunc(func(params status.NrStatusLikeParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusLike has not yet been implemented")
		}),
		StatusNrStatusRetweetHandler: status.NrStatusRetweetHandlerFunc(func(params status.NrStatusRetweetParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusRetweet has not yet been implemented")
		}),
		StatusNrStatusSearchHandler: status.NrStatusSearchHandlerFunc(func(params status.NrStatusSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusSearch has not yet been implemented")
		}),
		StatusNrStatusShowHandler: status.NrStatusShowHandlerFunc(func(params status.NrStatusShowParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusShow has not yet been implemented")
		}),
		StatusNrStatusTagsHandler: status.NrStatusTagsHandlerFunc(func(params status.NrStatusTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusTags has not yet been implemented")
		}),
		StatusNrStatusTimelineHandler: status.NrStatusTimelineHandlerFunc(func(params status.NrStatusTimelineParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusTimeline has not yet been implemented")
		}),
		StatusNrStatusUnlikeHandler: status.NrStatusUnlikeHandlerFunc(func(params status.NrStatusUnlikeParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusNrStatusUnlike has not yet been implemented")
		}),
		TopicNrTopicCreateHandler: topic.NrTopicCreateHandlerFunc(func(params topic.NrTopicCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicCreate has not yet been implemented")
		}),
		TopicNrTopicFollowHandler: topic.NrTopicFollowHandlerFunc(func(params topic.NrTopicFollowParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicFollow has not yet been implemented")
		}),
		TopicNrTopicListHandler: topic.NrTopicListHandlerFunc(func(params topic.NrTopicListParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicList has not yet been implemented")
		}),
		TopicNrTopicMatchHandler: topic.NrTopicMatchHandlerFunc(func(params topic.NrTopicMatchParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicMatch has not yet been implemented")
		}),
		TopicNrTopicSearchHandler: topic.NrTopicSearchHandlerFunc(func(params topic.NrTopicSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicSearch has not yet been implemented")
		}),
		TopicNrTopicShowHandler: topic.NrTopicShowHandlerFunc(func(params topic.NrTopicShowParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicShow has not yet been implemented")
		}),
		TopicNrTopicStatusHandler: topic.NrTopicStatusHandlerFunc(func(params topic.NrTopicStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicStatus has not yet been implemented")
		}),
		TopicNrTopicUnfollowHandler: topic.NrTopicUnfollowHandlerFunc(func(params topic.NrTopicUnfollowParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicUnfollow has not yet been implemented")
		}),
		UserNrUserAggreeToFriendHandler: user.NrUserAggreeToFriendHandlerFunc(func(params user.NrUserAggreeToFriendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserAggreeToFriend has not yet been implemented")
		}),
		UserNrUserApplyFriendHandler: user.NrUserApplyFriendHandlerFunc(func(params user.NrUserApplyFriendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserApplyFriend has not yet been implemented")
		}),
		UserNrUserDeleteFriendHandler: user.NrUserDeleteFriendHandlerFunc(func(params user.NrUserDeleteFriendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserDeleteFriend has not yet been implemented")
		}),
		UserNrUserFansHandler: user.NrUserFansHandlerFunc(func(params user.NrUserFansParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserFans has not yet been implemented")
		}),
		UserNrUserFollowHandler: user.NrUserFollowHandlerFunc(func(params user.NrUserFollowParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserFollow has not yet been implemented")
		}),
		UserNrUserFollowsHandler: user.NrUserFollowsHandlerFunc(func(params user.NrUserFollowsParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserFollows has not yet been implemented")
		}),
		UserNrUserFriendsHandler: user.NrUserFriendsHandlerFunc(func(params user.NrUserFriendsParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserFriends has not yet been implemented")
		}),
		UserNrUserPhotosHandler: user.NrUserPhotosHandlerFunc(func(params user.NrUserPhotosParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserPhotos has not yet been implemented")
		}),
		UserNrUserRefuseToFriendHandler: user.NrUserRefuseToFriendHandlerFunc(func(params user.NrUserRefuseToFriendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserRefuseToFriend has not yet been implemented")
		}),
		UserNrUserShowHandler: user.NrUserShowHandlerFunc(func(params user.NrUserShowParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserShow has not yet been implemented")
		}),
		UserNrUserStatusHandler: user.NrUserStatusHandlerFunc(func(params user.NrUserStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserStatus has not yet been implemented")
		}),
		UserNrUserUnfollowHandler: user.NrUserUnfollowHandlerFunc(func(params user.NrUserUnfollowParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserUnfollow has not yet been implemented")
		}),
		UserNrUserZonesHandler: user.NrUserZonesHandlerFunc(func(params user.NrUserZonesParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserZones has not yet been implemented")
		}),
		ZoneNrZoneAggreeHandler: zone.NrZoneAggreeHandlerFunc(func(params zone.NrZoneAggreeParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneAggree has not yet been implemented")
		}),
		ZoneNrZoneApplyHandler: zone.NrZoneApplyHandlerFunc(func(params zone.NrZoneApplyParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneApply has not yet been implemented")
		}),
		ZoneNrZoneCreateHandler: zone.NrZoneCreateHandlerFunc(func(params zone.NrZoneCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneCreate has not yet been implemented")
		}),
		ZoneNrZoneDropHandler: zone.NrZoneDropHandlerFunc(func(params zone.NrZoneDropParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneDrop has not yet been implemented")
		}),
		ZoneNrZoneInviteHandler: zone.NrZoneInviteHandlerFunc(func(params zone.NrZoneInviteParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneInvite has not yet been implemented")
		}),
		ZoneNrZoneListHandler: zone.NrZoneListHandlerFunc(func(params zone.NrZoneListParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneList has not yet been implemented")
		}),
		ZoneNrZoneMembersHandler: zone.NrZoneMembersHandlerFunc(func(params zone.NrZoneMembersParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneMembers has not yet been implemented")
		}),
		ZoneNrZoneQuiteHandler: zone.NrZoneQuiteHandlerFunc(func(params zone.NrZoneQuiteParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneQuite has not yet been implemented")
		}),
		ZoneNrZoneRecommendHandler: zone.NrZoneRecommendHandlerFunc(func(params zone.NrZoneRecommendParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneRecommend has not yet been implemented")
		}),
		ZoneNrZoneRefuseHandler: zone.NrZoneRefuseHandlerFunc(func(params zone.NrZoneRefuseParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneRefuse has not yet been implemented")
		}),
		ZoneNrZoneReportHandler: zone.NrZoneReportHandlerFunc(func(params zone.NrZoneReportParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneReport has not yet been implemented")
		}),
		ZoneNrZoneShowHandler: zone.NrZoneShowHandlerFunc(func(params zone.NrZoneShowParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneShow has not yet been implemented")
		}),
		ZoneNrZoneStatusHandler: zone.NrZoneStatusHandlerFunc(func(params zone.NrZoneStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneStatus has not yet been implemented")
		}),
		ZoneNrZoneUpdateHandler: zone.NrZoneUpdateHandlerFunc(func(params zone.NrZoneUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ZoneNrZoneUpdate has not yet been implemented")
		}),
	}
}

/*RelationZoneAPI This is Public Relation Zone API */
type RelationZoneAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// CommentNrCommentsCreateHandler sets the operation handler for the comments create operation
	CommentNrCommentsCreateHandler comment.NrCommentsCreateHandler
	// CommentNrCommentsDeleteHandler sets the operation handler for the comments delete operation
	CommentNrCommentsDeleteHandler comment.NrCommentsDeleteHandler
	// CommentNrCommentsListHandler sets the operation handler for the comments list operation
	CommentNrCommentsListHandler comment.NrCommentsListHandler
	// CommentNrCommentsReplyHandler sets the operation handler for the comments reply operation
	CommentNrCommentsReplyHandler comment.NrCommentsReplyHandler
	// FileUploadNrFileUploadHandler sets the operation handler for the file upload operation
	FileUploadNrFileUploadHandler file_upload.NrFileUploadHandler
	// StatusNrStatusCreateHandler sets the operation handler for the status create operation
	StatusNrStatusCreateHandler status.NrStatusCreateHandler
	// StatusNrStatusLikeHandler sets the operation handler for the status like operation
	StatusNrStatusLikeHandler status.NrStatusLikeHandler
	// StatusNrStatusRetweetHandler sets the operation handler for the status retweet operation
	StatusNrStatusRetweetHandler status.NrStatusRetweetHandler
	// StatusNrStatusSearchHandler sets the operation handler for the status search operation
	StatusNrStatusSearchHandler status.NrStatusSearchHandler
	// StatusNrStatusShowHandler sets the operation handler for the status show operation
	StatusNrStatusShowHandler status.NrStatusShowHandler
	// StatusNrStatusTagsHandler sets the operation handler for the status tags operation
	StatusNrStatusTagsHandler status.NrStatusTagsHandler
	// StatusNrStatusTimelineHandler sets the operation handler for the status timeline operation
	StatusNrStatusTimelineHandler status.NrStatusTimelineHandler
	// StatusNrStatusUnlikeHandler sets the operation handler for the status unlike operation
	StatusNrStatusUnlikeHandler status.NrStatusUnlikeHandler
	// TopicNrTopicCreateHandler sets the operation handler for the topic create operation
	TopicNrTopicCreateHandler topic.NrTopicCreateHandler
	// TopicNrTopicFollowHandler sets the operation handler for the topic follow operation
	TopicNrTopicFollowHandler topic.NrTopicFollowHandler
	// TopicNrTopicListHandler sets the operation handler for the topic list operation
	TopicNrTopicListHandler topic.NrTopicListHandler
	// TopicNrTopicMatchHandler sets the operation handler for the topic match operation
	TopicNrTopicMatchHandler topic.NrTopicMatchHandler
	// TopicNrTopicSearchHandler sets the operation handler for the topic search operation
	TopicNrTopicSearchHandler topic.NrTopicSearchHandler
	// TopicNrTopicShowHandler sets the operation handler for the topic show operation
	TopicNrTopicShowHandler topic.NrTopicShowHandler
	// TopicNrTopicStatusHandler sets the operation handler for the topic status operation
	TopicNrTopicStatusHandler topic.NrTopicStatusHandler
	// TopicNrTopicUnfollowHandler sets the operation handler for the topic unfollow operation
	TopicNrTopicUnfollowHandler topic.NrTopicUnfollowHandler
	// UserNrUserAggreeToFriendHandler sets the operation handler for the user aggree to friend operation
	UserNrUserAggreeToFriendHandler user.NrUserAggreeToFriendHandler
	// UserNrUserApplyFriendHandler sets the operation handler for the user apply friend operation
	UserNrUserApplyFriendHandler user.NrUserApplyFriendHandler
	// UserNrUserDeleteFriendHandler sets the operation handler for the user delete friend operation
	UserNrUserDeleteFriendHandler user.NrUserDeleteFriendHandler
	// UserNrUserFansHandler sets the operation handler for the user fans operation
	UserNrUserFansHandler user.NrUserFansHandler
	// UserNrUserFollowHandler sets the operation handler for the user follow operation
	UserNrUserFollowHandler user.NrUserFollowHandler
	// UserNrUserFollowsHandler sets the operation handler for the user follows operation
	UserNrUserFollowsHandler user.NrUserFollowsHandler
	// UserNrUserFriendsHandler sets the operation handler for the user friends operation
	UserNrUserFriendsHandler user.NrUserFriendsHandler
	// UserNrUserPhotosHandler sets the operation handler for the user photos operation
	UserNrUserPhotosHandler user.NrUserPhotosHandler
	// UserNrUserRefuseToFriendHandler sets the operation handler for the user refuse to friend operation
	UserNrUserRefuseToFriendHandler user.NrUserRefuseToFriendHandler
	// UserNrUserShowHandler sets the operation handler for the user show operation
	UserNrUserShowHandler user.NrUserShowHandler
	// UserNrUserStatusHandler sets the operation handler for the user status operation
	UserNrUserStatusHandler user.NrUserStatusHandler
	// UserNrUserUnfollowHandler sets the operation handler for the user unfollow operation
	UserNrUserUnfollowHandler user.NrUserUnfollowHandler
	// UserNrUserZonesHandler sets the operation handler for the user zones operation
	UserNrUserZonesHandler user.NrUserZonesHandler
	// ZoneNrZoneAggreeHandler sets the operation handler for the zone aggree operation
	ZoneNrZoneAggreeHandler zone.NrZoneAggreeHandler
	// ZoneNrZoneApplyHandler sets the operation handler for the zone apply operation
	ZoneNrZoneApplyHandler zone.NrZoneApplyHandler
	// ZoneNrZoneCreateHandler sets the operation handler for the zone create operation
	ZoneNrZoneCreateHandler zone.NrZoneCreateHandler
	// ZoneNrZoneDropHandler sets the operation handler for the zone drop operation
	ZoneNrZoneDropHandler zone.NrZoneDropHandler
	// ZoneNrZoneInviteHandler sets the operation handler for the zone invite operation
	ZoneNrZoneInviteHandler zone.NrZoneInviteHandler
	// ZoneNrZoneListHandler sets the operation handler for the zone list operation
	ZoneNrZoneListHandler zone.NrZoneListHandler
	// ZoneNrZoneMembersHandler sets the operation handler for the zone members operation
	ZoneNrZoneMembersHandler zone.NrZoneMembersHandler
	// ZoneNrZoneQuiteHandler sets the operation handler for the zone quite operation
	ZoneNrZoneQuiteHandler zone.NrZoneQuiteHandler
	// ZoneNrZoneRecommendHandler sets the operation handler for the zone recommend operation
	ZoneNrZoneRecommendHandler zone.NrZoneRecommendHandler
	// ZoneNrZoneRefuseHandler sets the operation handler for the zone refuse operation
	ZoneNrZoneRefuseHandler zone.NrZoneRefuseHandler
	// ZoneNrZoneReportHandler sets the operation handler for the zone report operation
	ZoneNrZoneReportHandler zone.NrZoneReportHandler
	// ZoneNrZoneShowHandler sets the operation handler for the zone show operation
	ZoneNrZoneShowHandler zone.NrZoneShowHandler
	// ZoneNrZoneStatusHandler sets the operation handler for the zone status operation
	ZoneNrZoneStatusHandler zone.NrZoneStatusHandler
	// ZoneNrZoneUpdateHandler sets the operation handler for the zone update operation
	ZoneNrZoneUpdateHandler zone.NrZoneUpdateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RelationZoneAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RelationZoneAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RelationZoneAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RelationZoneAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RelationZoneAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RelationZoneAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RelationZoneAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RelationZoneAPI
func (o *RelationZoneAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CommentNrCommentsCreateHandler == nil {
		unregistered = append(unregistered, "comment.NrCommentsCreateHandler")
	}

	if o.CommentNrCommentsDeleteHandler == nil {
		unregistered = append(unregistered, "comment.NrCommentsDeleteHandler")
	}

	if o.CommentNrCommentsListHandler == nil {
		unregistered = append(unregistered, "comment.NrCommentsListHandler")
	}

	if o.CommentNrCommentsReplyHandler == nil {
		unregistered = append(unregistered, "comment.NrCommentsReplyHandler")
	}

	if o.FileUploadNrFileUploadHandler == nil {
		unregistered = append(unregistered, "file_upload.NrFileUploadHandler")
	}

	if o.StatusNrStatusCreateHandler == nil {
		unregistered = append(unregistered, "status.NrStatusCreateHandler")
	}

	if o.StatusNrStatusLikeHandler == nil {
		unregistered = append(unregistered, "status.NrStatusLikeHandler")
	}

	if o.StatusNrStatusRetweetHandler == nil {
		unregistered = append(unregistered, "status.NrStatusRetweetHandler")
	}

	if o.StatusNrStatusSearchHandler == nil {
		unregistered = append(unregistered, "status.NrStatusSearchHandler")
	}

	if o.StatusNrStatusShowHandler == nil {
		unregistered = append(unregistered, "status.NrStatusShowHandler")
	}

	if o.StatusNrStatusTagsHandler == nil {
		unregistered = append(unregistered, "status.NrStatusTagsHandler")
	}

	if o.StatusNrStatusTimelineHandler == nil {
		unregistered = append(unregistered, "status.NrStatusTimelineHandler")
	}

	if o.StatusNrStatusUnlikeHandler == nil {
		unregistered = append(unregistered, "status.NrStatusUnlikeHandler")
	}

	if o.TopicNrTopicCreateHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicCreateHandler")
	}

	if o.TopicNrTopicFollowHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicFollowHandler")
	}

	if o.TopicNrTopicListHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicListHandler")
	}

	if o.TopicNrTopicMatchHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicMatchHandler")
	}

	if o.TopicNrTopicSearchHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicSearchHandler")
	}

	if o.TopicNrTopicShowHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicShowHandler")
	}

	if o.TopicNrTopicStatusHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicStatusHandler")
	}

	if o.TopicNrTopicUnfollowHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicUnfollowHandler")
	}

	if o.UserNrUserAggreeToFriendHandler == nil {
		unregistered = append(unregistered, "user.NrUserAggreeToFriendHandler")
	}

	if o.UserNrUserApplyFriendHandler == nil {
		unregistered = append(unregistered, "user.NrUserApplyFriendHandler")
	}

	if o.UserNrUserDeleteFriendHandler == nil {
		unregistered = append(unregistered, "user.NrUserDeleteFriendHandler")
	}

	if o.UserNrUserFansHandler == nil {
		unregistered = append(unregistered, "user.NrUserFansHandler")
	}

	if o.UserNrUserFollowHandler == nil {
		unregistered = append(unregistered, "user.NrUserFollowHandler")
	}

	if o.UserNrUserFollowsHandler == nil {
		unregistered = append(unregistered, "user.NrUserFollowsHandler")
	}

	if o.UserNrUserFriendsHandler == nil {
		unregistered = append(unregistered, "user.NrUserFriendsHandler")
	}

	if o.UserNrUserPhotosHandler == nil {
		unregistered = append(unregistered, "user.NrUserPhotosHandler")
	}

	if o.UserNrUserRefuseToFriendHandler == nil {
		unregistered = append(unregistered, "user.NrUserRefuseToFriendHandler")
	}

	if o.UserNrUserShowHandler == nil {
		unregistered = append(unregistered, "user.NrUserShowHandler")
	}

	if o.UserNrUserStatusHandler == nil {
		unregistered = append(unregistered, "user.NrUserStatusHandler")
	}

	if o.UserNrUserUnfollowHandler == nil {
		unregistered = append(unregistered, "user.NrUserUnfollowHandler")
	}

	if o.UserNrUserZonesHandler == nil {
		unregistered = append(unregistered, "user.NrUserZonesHandler")
	}

	if o.ZoneNrZoneAggreeHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneAggreeHandler")
	}

	if o.ZoneNrZoneApplyHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneApplyHandler")
	}

	if o.ZoneNrZoneCreateHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneCreateHandler")
	}

	if o.ZoneNrZoneDropHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneDropHandler")
	}

	if o.ZoneNrZoneInviteHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneInviteHandler")
	}

	if o.ZoneNrZoneListHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneListHandler")
	}

	if o.ZoneNrZoneMembersHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneMembersHandler")
	}

	if o.ZoneNrZoneQuiteHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneQuiteHandler")
	}

	if o.ZoneNrZoneRecommendHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneRecommendHandler")
	}

	if o.ZoneNrZoneRefuseHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneRefuseHandler")
	}

	if o.ZoneNrZoneReportHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneReportHandler")
	}

	if o.ZoneNrZoneShowHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneShowHandler")
	}

	if o.ZoneNrZoneStatusHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneStatusHandler")
	}

	if o.ZoneNrZoneUpdateHandler == nil {
		unregistered = append(unregistered, "zone.NrZoneUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RelationZoneAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RelationZoneAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *RelationZoneAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *RelationZoneAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RelationZoneAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RelationZoneAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the relation zone API
func (o *RelationZoneAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RelationZoneAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments/create"] = comment.NewNrCommentsCreate(o.context, o.CommentNrCommentsCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments/delete"] = comment.NewNrCommentsDelete(o.context, o.CommentNrCommentsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/list"] = comment.NewNrCommentsList(o.context, o.CommentNrCommentsListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments/reply"] = comment.NewNrCommentsReply(o.context, o.CommentNrCommentsReplyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/file/upload"] = file_upload.NewNrFileUpload(o.context, o.FileUploadNrFileUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/status/create"] = status.NewNrStatusCreate(o.context, o.StatusNrStatusCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/status/like"] = status.NewNrStatusLike(o.context, o.StatusNrStatusLikeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/status/retweet"] = status.NewNrStatusRetweet(o.context, o.StatusNrStatusRetweetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/search"] = status.NewNrStatusSearch(o.context, o.StatusNrStatusSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/show"] = status.NewNrStatusShow(o.context, o.StatusNrStatusShowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/tags"] = status.NewNrStatusTags(o.context, o.StatusNrStatusTagsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/timeline"] = status.NewNrStatusTimeline(o.context, o.StatusNrStatusTimelineHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/status/unlike"] = status.NewNrStatusUnlike(o.context, o.StatusNrStatusUnlikeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/topic/create"] = topic.NewNrTopicCreate(o.context, o.TopicNrTopicCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/topic/follow"] = topic.NewNrTopicFollow(o.context, o.TopicNrTopicFollowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/list"] = topic.NewNrTopicList(o.context, o.TopicNrTopicListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/match"] = topic.NewNrTopicMatch(o.context, o.TopicNrTopicMatchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/search"] = topic.NewNrTopicSearch(o.context, o.TopicNrTopicSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/show"] = topic.NewNrTopicShow(o.context, o.TopicNrTopicShowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/status"] = topic.NewNrTopicStatus(o.context, o.TopicNrTopicStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/topic/unfollow"] = topic.NewNrTopicUnfollow(o.context, o.TopicNrTopicUnfollowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/aggreeToFriend"] = user.NewNrUserAggreeToFriend(o.context, o.UserNrUserAggreeToFriendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/applyToFriend"] = user.NewNrUserApplyFriend(o.context, o.UserNrUserApplyFriendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/deleteFriend"] = user.NewNrUserDeleteFriend(o.context, o.UserNrUserDeleteFriendHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/fans"] = user.NewNrUserFans(o.context, o.UserNrUserFansHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/follow"] = user.NewNrUserFollow(o.context, o.UserNrUserFollowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/follows"] = user.NewNrUserFollows(o.context, o.UserNrUserFollowsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/friends"] = user.NewNrUserFriends(o.context, o.UserNrUserFriendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/photos"] = user.NewNrUserPhotos(o.context, o.UserNrUserPhotosHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/refuseToFriend"] = user.NewNrUserRefuseToFriend(o.context, o.UserNrUserRefuseToFriendHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/show"] = user.NewNrUserShow(o.context, o.UserNrUserShowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/status"] = user.NewNrUserStatus(o.context, o.UserNrUserStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/unfollow"] = user.NewNrUserUnfollow(o.context, o.UserNrUserUnfollowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/zones"] = user.NewNrUserZones(o.context, o.UserNrUserZonesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/aggree"] = zone.NewNrZoneAggree(o.context, o.ZoneNrZoneAggreeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/apply"] = zone.NewNrZoneApply(o.context, o.ZoneNrZoneApplyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/create"] = zone.NewNrZoneCreate(o.context, o.ZoneNrZoneCreateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/drop"] = zone.NewNrZoneDrop(o.context, o.ZoneNrZoneDropHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/invite"] = zone.NewNrZoneInvite(o.context, o.ZoneNrZoneInviteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/list"] = zone.NewNrZoneList(o.context, o.ZoneNrZoneListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/members"] = zone.NewNrZoneMembers(o.context, o.ZoneNrZoneMembersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/quite"] = zone.NewNrZoneQuite(o.context, o.ZoneNrZoneQuiteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/recommend"] = zone.NewNrZoneRecommend(o.context, o.ZoneNrZoneRecommendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/refuse"] = zone.NewNrZoneRefuse(o.context, o.ZoneNrZoneRefuseHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/report"] = zone.NewNrZoneReport(o.context, o.ZoneNrZoneReportHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/show"] = zone.NewNrZoneShow(o.context, o.ZoneNrZoneShowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/status"] = zone.NewNrZoneStatus(o.context, o.ZoneNrZoneStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/update"] = zone.NewNrZoneUpdate(o.context, o.ZoneNrZoneUpdateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RelationZoneAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *RelationZoneAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
