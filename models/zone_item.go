// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZoneItem zone item
// swagger:model ZoneItem
type ZoneItem struct {

	// 圈子等级
	Level int64 `json:"level"`

	// 圈子名称
	// Required: true
	Name *string `json:"name"`

	// 圈子的缩略图
	// Required: true
	Pic *string `json:"pic"`

	// 圈子简介
	Summary string `json:"summary"`

	// 圈子唯一标识符
	// Required: true
	ZoneID *int64 `json:"zone_id"`

	Status *int64 `json:"status"`

	Logo string `json:"logo"`

	Photo string `json:"photo"`
}

// Validate validates this zone item
func (m *ZoneItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZoneID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ZoneItem) validatePic(formats strfmt.Registry) error {

	if err := validate.Required("pic", "body", m.Pic); err != nil {
		return err
	}

	return nil
}

func (m *ZoneItem) validateZoneID(formats strfmt.Registry) error {

	if err := validate.Required("zone_id", "body", m.ZoneID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneItem) UnmarshalBinary(b []byte) error {
	var res ZoneItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
