// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetweetedStatus retweeted status
// swagger:model RetweetedStatus
type RetweetedStatus struct {

	// ait users
	AitUsers RetweetedStatusAitUsers `json:"ait_users"`

	// 动态创建日期
	CreatedAt int64 `json:"created_at,omitempty"`

	// 图片地址数组, 列表中最大6张
	RetweetPics []string `json:"retweet_pics"`

	// 帖子内容
	// Required: true
	RetweetText *string `json:"retweet_text"`

	// 帖子发起人ID
	// Required: true
	RetweeterEuid *string `json:"retweeter_euid"`

	// 帖子发起人昵称
	// Required: true
	RetweeterName *string `json:"retweeter_name"`
}

// Validate validates this retweeted status
func (m *RetweetedStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRetweetPics(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetweetText(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetweeterEuid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetweeterName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetweetedStatus) validateRetweetPics(formats strfmt.Registry) error {

	if swag.IsZero(m.RetweetPics) { // not required
		return nil
	}

	return nil
}

func (m *RetweetedStatus) validateRetweetText(formats strfmt.Registry) error {

	if err := validate.Required("retweet_text", "body", m.RetweetText); err != nil {
		return err
	}

	return nil
}

func (m *RetweetedStatus) validateRetweeterEuid(formats strfmt.Registry) error {

	if err := validate.Required("retweeter_euid", "body", m.RetweeterEuid); err != nil {
		return err
	}

	return nil
}

func (m *RetweetedStatus) validateRetweeterName(formats strfmt.Registry) error {

	if err := validate.Required("retweeter_name", "body", m.RetweeterName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetweetedStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetweetedStatus) UnmarshalBinary(b []byte) error {
	var res RetweetedStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
