// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserItem 用户在圈子内的信息
// swagger:model UserItem
type UserItem struct {

	// 用户头像
	// Required: true
	Avatar *string `json:"avatar"`

	// 加密后的用户ID
	// Required: true
	Euid *string `json:"euid"`

	// 是否已关注
	Followed bool `json:"followed,omitempty"`

	// 用户性别(0:保密 1:男 2:女)
	Gender int64 `json:"gender"`

	// 用户昵称
	// Required: true
	Nickname *string `json:"nickname"`

	// 用户所在圈子的职位(0:普通成员 1:管理员 2:圈主)
	Position int64 `json:"position"`

	RegisterAt *string `json:"registerAt"`

	LoginAt *string `json:"loginAt"`

	Level *int64 `json:level`
}

// Validate validates this user item
func (m *UserItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEuid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserItem) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *UserItem) validateEuid(formats strfmt.Registry) error {

	if err := validate.Required("euid", "body", m.Euid); err != nil {
		return err
	}

	return nil
}

func (m *UserItem) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserItem) UnmarshalBinary(b []byte) error {
	var res UserItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
