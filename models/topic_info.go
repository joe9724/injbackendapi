// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TopicInfo topic info
// swagger:model TopicInfo
type TopicInfo struct {

	// 话题简介
	Brief string `json:"brief"`

	// 话题创建时间
	// Required: true
	CreatedAt *string `json:"created_at"`

	// 粉丝数
	FollowsCount int64 `json:"follows_count"`

	// 话题Logo路径
	Logo string `json:"logo"`

	// 话题标题
	// Required: true
	Name *string `json:"name"`

	// 话题个性图片路径
	Photo string `json:"photo"`

	// 话题内动态个数
	StatusCount int64 `json:"status_count"`

	// 话题ID
	// Required: true
	Tid *int64 `json:"tid"`

	// 访问次数
	VisitTimes int64 `json:"visit_times"`
}

// Validate validates this topic info
func (m *TopicInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopicInfo) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TopicInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TopicInfo) validateTid(formats strfmt.Registry) error {

	if err := validate.Required("tid", "body", m.Tid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopicInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopicInfo) UnmarshalBinary(b []byte) error {
	var res TopicInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
