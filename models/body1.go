// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Body1 body 1
// swagger:model body_1
type Body1 struct {

	// 分类ID
	CategoryID int64 `json:"category_id,omitempty"`

	// 创建人ID
	// Required: true
	Euid *string `json:"euid"`

	// 上传的Logo图片ID
	// Required: true
	LogoID *string `json:"logo_id"`

	// 圈子名称
	// Required: true
	Name *string `json:"name"`

	// oid
	Oid string `json:"oid,omitempty"`

	// 上传的个性图片ID
	PicID string `json:"pic_id,omitempty"`

	// 圈子简介
	Remark string `json:"remark,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// 创建圈子时邀请的用户, 可以传入多个用户id, 以","分隔
	UserIds string `json:"user_ids,omitempty"`
}

// Validate validates this body 1
func (m *Body1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEuid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body1) validateEuid(formats strfmt.Registry) error {

	if err := validate.Required("euid", "body", m.Euid); err != nil {
		return err
	}

	return nil
}

func (m *Body1) validateLogoID(formats strfmt.Registry) error {

	if err := validate.Required("logo_id", "body", m.LogoID); err != nil {
		return err
	}

	return nil
}

func (m *Body1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Body1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Body1) UnmarshalBinary(b []byte) error {
	var res Body1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
